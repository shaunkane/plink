/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

// setup.js
// this code instantiates objects and connects things
// at page startup

// don't change the code below unless you want
// to change the overall behavior of the game engine

// this code instantiates the global objects and connects
// things to other things
document.addEventListener('DOMContentLoaded', function(event) {

    // instantiate objects

    // create game state. see gameState.js for details
    window.GameState = new GameState(STATE_START);
    // set up the UI
    window.UserInterface = new UserInterface(document.querySelector("#plinkUI"));
    window.UserInterface.initializeUI();
    // gesture and keyboard input
    window.InputManager = new InputManager(document.querySelector('#gestureCanvas'));
    // this manages all the audio
    window.AudioManager = new AudioManager();

    // connect objects to each other

    // show speech and audio in the UI
    window.addEventListener('speak', (event) => {
        window.UserInterface.showMainAudio(event.detail);
    });
    window.addEventListener('soundEffect', (event) => {
        window.UserInterface.showSoundEffect(event.detail.name, event.detail.panValue, event.detail.loop);
    });
    // show user input in the UI
    // this is called for both keyboard input and 
    // gestures (which are generated by the InputManager)
    document.addEventListener('controllerInput', (event) => {
        const key = event.detail;
        window.UserInterface.showUserInput(key);
    });

    // pass input to the user's game
    // note that we only do this if the game is in the
    // Playing state, and if the key matches one of our
    // predefined controller keys
    document.addEventListener('controllerInput', (event) => {
        if (window.GameState.state == STATE_GAME_PLAYING) {
            const key = event.detail;
            handleInput(key);
        }
    });

    // here we step through the other state functions
    // first we request input to unlock the audio
    window.AudioManager.speak("Press a key or tap the screen to begin.");
    window.GameState.state = STATE_REQUEST_INPUT;

    // separate keyboard handler down here to keep these setup steps organized
    document.addEventListener('controllerInput', (event) => {
        if (window.GameState.state == STATE_REQUEST_INPUT) {
            // stop speaking
            window.speechSynthesis.cancel();

            // play a beep (100hz, .5secs) to free the audio
            window.AudioManager.playTone(100, 500);
            setTimeout(() => {
                window.GameState.state = STATE_RECEIVED_INPUT;

                // once we get input, we do game setup
                // this is an async function that blocks until the
                // items are loaded
                window.GameState.state = STATE_GAME_SETUP;

                // CALL TO USER CODE
                // also this is an async function
                gameSetup().then(() => {
                    window.GameState.state = STATE_GAME_SETUP_COMPLETED;

                    // now we start the game intro. after this, nothing happens
                    //  until a key is pressed, so we handle it below
                    window.GameState.state = STATE_GAME_INTRO_STARTED;

                    // CALL TO USER CODE
                    gameIntroduction();

                });


            }, 1000);
        } else if (window.GameState.state == STATE_GAME_INTRO_STARTED) {
            if (window.AudioManager.queue != null) {
                window.AudioManager.queue.cancel();
            }

            window.GameState.state = STATE_GAME_INTRO_COMPLETE;

            // stop speaking
            window.speechSynthesis.cancel();
            window.GameState.state = STATE_GAME_PLAYING;

            // CALL TO USER CODE
            gamePlay();
        }
    });
});